/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/openebscluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenebsClusterLister helps list OpenebsClusters.
type OpenebsClusterLister interface {
	// List lists all OpenebsClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OpenebsCluster, err error)
	// OpenebsClusters returns an object that can list and get OpenebsClusters.
	OpenebsClusters(namespace string) OpenebsClusterNamespaceLister
	OpenebsClusterListerExpansion
}

// openebsClusterLister implements the OpenebsClusterLister interface.
type openebsClusterLister struct {
	indexer cache.Indexer
}

// NewOpenebsClusterLister returns a new OpenebsClusterLister.
func NewOpenebsClusterLister(indexer cache.Indexer) OpenebsClusterLister {
	return &openebsClusterLister{indexer: indexer}
}

// List lists all OpenebsClusters in the indexer.
func (s *openebsClusterLister) List(selector labels.Selector) (ret []*v1alpha1.OpenebsCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenebsCluster))
	})
	return ret, err
}

// OpenebsClusters returns an object that can list and get OpenebsClusters.
func (s *openebsClusterLister) OpenebsClusters(namespace string) OpenebsClusterNamespaceLister {
	return openebsClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenebsClusterNamespaceLister helps list and get OpenebsClusters.
type OpenebsClusterNamespaceLister interface {
	// List lists all OpenebsClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OpenebsCluster, err error)
	// Get retrieves the OpenebsCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OpenebsCluster, error)
	OpenebsClusterNamespaceListerExpansion
}

// openebsClusterNamespaceLister implements the OpenebsClusterNamespaceLister
// interface.
type openebsClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenebsClusters in the indexer for a given namespace.
func (s openebsClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenebsCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenebsCluster))
	})
	return ret, err
}

// Get retrieves the OpenebsCluster from the indexer for a given namespace and name.
func (s openebsClusterNamespaceLister) Get(name string) (*v1alpha1.OpenebsCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openebscluster"), name)
	}
	return obj.(*v1alpha1.OpenebsCluster), nil
}
